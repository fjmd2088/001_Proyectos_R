remove(list = ls())
#---------------------------------------------------------------------------------------------------
# SE CARGAN LIBRERIAS
#---------------------------------------------------------------------------------------------------
library(openxlsx)
# library(readxl)
# library(dplyr)
# library(data.table)
library(svDialogs)
options(warn = -1) # Desactivar todas las advertencias, 0 para activar
# dir_db <- paste0(getwd(),"/01_Database/")
DIR_ED <- paste0(getwd(),"/01_Estructura_datos_extraccion/")
# dir_db <- paste0(getwd(),"/01_Database/")
DIR_ED <- paste0(getwd(),"/01_Estructura_datos_extraccion/")
# dir_db <- paste0(getwd(),"/01_Database/")
DIR_ED <- paste0(getwd(),"/01_Estructura_Datos_Extraccion/")
DIR_ED <- paste0(getwd(),"/01_Estructura_Datos_Extraccion/")
DIR_RE <- paste0(getwd(),"/02_Database_Reporte_Estadistico/")
#---------------------------------------------------------------------------------------------------
# VARIABLES
#---------------------------------------------------------------------------------------------------
# Mes y año a analizar
# MESES <- c("01_ENERO","02_FEBRERO","03_MARZO","04_ABRIL","05_MAYO","06_JUNIO","07_JULIO","08_AGOSTO","09_SEPTIEMBRE","10_OCTUBRE","11_NOVIEMBRE","12_DICIEMBRE") # ***** MODIFICAR *****
MESES <- c("01_ENERO") # ***** MODIFICAR SOLO ANALIZAR UN MES*****
ANIO <- 2024 # ***** MODIFICAR *****
# library(tidyr)
# library(plotly)
# library(plyr)
library(parallel)
# library(readxl)
library(dplyr)
#---------------------------------------------------------------------------------------------------
#                                             PARALLELO
#---------------------------------------------------------------------------------------------------
NUM_CORES <- detectCores() - 1
NUM_CORES
# Directorio con carpetas de meses
directorio_principal <- paste0(getwd(),"/02_Database_Reporte_Estadistico/")
directorio_principal
meses <- list.dirs(directorio_principal, recursive = FALSE)
meses
# Directorio con carpetas de meses
directorio_principal <- paste0(getwd(),"/02_Database_Reporte_Estadistico/")
meses <- list.dirs(directorio_principal, recursive = FALSE)
meses
#---------------------------------------------------------------------------------------------------
#                                             FUNCIONES
#---------------------------------------------------------------------------------------------------
Procesar_Excel <- function(ruta_archivo) {
hojas <- excel_sheets(ruta_archivo)
datos <- lapply(hojas[5:6], function(hoja) read_excel(ruta_archivo, sheet = hoja))
bind_rows(datos)  # Combinar datos de todas las hojas
}
Procesar_Mes <- function(ruta_mes){
archivos <- list.files(ruta_mes, pattern = "\\.xls$", full.names = TRUE)
datos_mes <- mclapply(archivos, procesar_excel, mc.cores = num_cores)
bind_rows(datos_mes)
}
# Directorio con carpetas de meses
directorio_principal <- paste0(getwd(),"/02_Database_Reporte_Estadistico/")
meses <- list.dirs(directorio_principal, recursive = FALSE)
meses
# Ejecutar en paralelo para cada mes
datos_final <- mclapply(meses, Procesar_Mes, mc.cores = num_cores)
# Ejecutar en paralelo para cada mes
datos_final <- mclapply(meses, Procesar_Mes, mc.cores = NUM_CORES)
#---------------------------------------------------------------------------------------------------
#                                             FUNCIONES
#---------------------------------------------------------------------------------------------------
# Crear el cluster
cl <- makeCluster(NUM_CORES)
# Exportar las funciones y librerías necesarias al cluster
clusterEvalQ(cl, {
library(readxl)
library(dplyr)
})
# Función para procesar cada archivo Excel
procesar_excel <- function(ruta_archivo) {
hojas <- excel_sheets(ruta_archivo)
datos <- lapply(hojas[1:10], function(hoja) read_excel(ruta_archivo, sheet = hoja))
bind_rows(datos)  # Combinar datos de todas las hojas
}
# Función para procesar cada mes
procesar_mes <- function(ruta_mes) {
archivos <- list.files(ruta_mes, pattern = "\\.xlsx$", full.names = TRUE)
datos_mes <- parLapply(cl, archivos, procesar_excel)
bind_rows(datos_mes)
}
# Directorio con carpetas de meses
directorio_principal <- "ruta_de_los_meses"
meses <- list.dirs(directorio_principal, recursive = FALSE)
# Ejecutar en paralelo para cada mes
datos_final <- parLapply(cl, meses, procesar_mes)
TF <- bind_rows(datos_final)
# Cerrar el cluster
stopCluster(cl)
# Directorio con carpetas de meses
directorio_principal <- paste0(getwd(),"/02_Database_Reporte_Estadistico/")
directorio_principal
meses <- list.dirs(directorio_principal, recursive = FALSE)
meses
# Ejecutar en paralelo para cada mes
datos_final <- parLapply(cl, meses, procesar_mes)
#---------------------------------------------------------------------------------------------------
#                                             FUNCIONES
#---------------------------------------------------------------------------------------------------
# Crear el cluster
cl <- makeCluster(NUM_CORES)
# Exportar las funciones y librerías necesarias al cluster
clusterEvalQ(cl, {
library(readxl)
library(dplyr)
})
# Función para procesar cada archivo Excel
procesar_excel <- function(ruta_archivo) {
hojas <- excel_sheets(ruta_archivo)
datos <- lapply(hojas[5:6], function(hoja) read_excel(ruta_archivo, sheet = hoja))
bind_rows(datos)  # Combinar datos de todas las hojas
}
# Función para procesar cada mes
procesar_mes <- function(ruta_mes) {
archivos <- list.files(ruta_mes, pattern = "\\.xlsx$", full.names = TRUE)
datos_mes <- parLapply(cl, archivos, procesar_excel)
bind_rows(datos_mes)
}
# Directorio con carpetas de meses
directorio_principal <- paste0(getwd(),"/02_Database_Reporte_Estadistico/")
meses <- list.dirs(directorio_principal, recursive = FALSE)
# Ejecutar en paralelo para cada mes
datos_final <- parLapply(cl, meses, procesar_mes)
TF <- bind_rows(datos_final)
# Cerrar el cluster
stopCluster(cl)
NUM_CORES <- detectCores() - 1
#---------------------------------------------------------------------------------------------------
#                                             FUNCIONES
#---------------------------------------------------------------------------------------------------
# Crear el cluster
cl <- makeCluster(NUM_CORES)
# Exportar las funciones y librerías necesarias al cluster
clusterEvalQ(cl, {
library(parallel)
library(readxl)
library(dplyr)
})
# Función para procesar cada archivo Excel
procesar_excel <- function(ruta_archivo) {
hojas <- excel_sheets(ruta_archivo)
datos <- lapply(hojas[5:6], function(hoja) read_excel(ruta_archivo, sheet = hoja))
bind_rows(datos)  # Combinar datos de todas las hojas
}
# Función para procesar cada mes
procesar_mes <- function(ruta_mes) {
archivos <- list.files(ruta_mes, pattern = "\\.xls$", full.names = TRUE)
datos_mes <- parLapply(cl, archivos, procesar_excel)
bind_rows(datos_mes)
}
# Directorio con carpetas de meses
directorio_principal <- paste0(getwd(),"/02_Database_Reporte_Estadistico/")
meses <- list.dirs(directorio_principal, recursive = FALSE)
# Ejecutar en paralelo para cada mes
datos_final <- parLapply(cl, meses, procesar_mes)
# Cerrar el cluster
stopCluster(cl)
# }else{
#
files.archivo <- "01_Estructura_Datos_Justicia_Agraria_2024_Extraccion_Variables_25mar2024" # ***** MODIFICAR *****
# Cerrar el cluster
stopCluster(cl)
#---------------------------------------------------------------------------------------------------
#                                             FUNCIONES
#---------------------------------------------------------------------------------------------------
# Crear el cluster
cl <- makeCluster(NUM_CORES)
# Exportar las funciones y librerías necesarias al cluster
clusterEvalQ(cl, {
library(parallel)
library(readxl)
library(dplyr)
})
# Función para procesar cada archivo Excel
procesar_excel <- function(ruta_archivo) {
hojas <- excel_sheets(ruta_archivo)
datos <- lapply(hojas[5:6], function(hoja) read_excel(ruta_archivo, sheet = hoja))
bind_rows(datos)  # Combinar datos de todas las hojas
}
# Función para procesar cada mes
procesar_mes <- function(ruta_mes) {
archivos <- list.files(ruta_mes, pattern = "\\.xls$", full.names = TRUE)
datos_mes <- parLapply(cl, archivos, procesar_excel)
bind_rows(datos_mes)
}
# Directorio con carpetas de meses
directorio_principal <- paste0(getwd(),"/02_Database_Reporte_Estadistico/")
meses <- list.dirs(directorio_principal, recursive = FALSE)
# Ejecutar en paralelo para cada mes
datos_final <- parLapply(cl, meses, procesar_mes)
TF <- bind_rows(datos_final)
# Cerrar el cluster
stopCluster(cl)
# Cerrar el cluster
stopCluster(cl)
# definir número de núcleos (hay que evitar saturacion del sistema)
NUM_CORES <- detectCores() - 1
NUM_CORES
#---------------------------------------------------------------------------------------------------
#                                             FUNCIONES
#---------------------------------------------------------------------------------------------------
# Crear el cluster
cl <- makeCluster(NUM_CORES)
# Exportar las funciones y librerías necesarias al cluster
clusterEvalQ(cl, {
library(parallel)
library(readxl)
library(dplyr)
})
# Función para procesar cada archivo Excel
procesar_excel <- function(ruta_archivo) {
hojas <- excel_sheets(ruta_archivo)
datos <- lapply(hojas[5:6], function(hoja) read_excel(ruta_archivo, sheet = hoja))
bind_rows(datos)  # Combinar datos de todas las hojas
}
# Función para procesar cada mes
procesar_mes <- function(ruta_mes) {
archivos <- list.files(ruta_mes, pattern = "\\.xls$", full.names = TRUE)
datos_mes <- parLapply(cl, archivos, procesar_excel)
bind_rows(datos_mes)
}
# Exportar las funciones necesarias al clúster
clusterExport(cl, c("procesar_excel", "procesar_mes"))
# Directorio con carpetas de meses
directorio_principal <- paste0(getwd(),"/02_Database_Reporte_Estadistico/")
meses <- list.dirs(directorio_principal, recursive = FALSE)
# Ejecutar en paralelo para cada mes
datos_final <- parLapply(cl, meses, procesar_mes)
TF <- bind_rows(datos_final)
# Cerrar el cluster
stopCluster(cl)
remove(list = ls())
# definir número de núcleos (hay que evitar saturacion del sistema)
NUM_CORES <- detectCores() - 1
#---------------------------------------------------------------------------------------------------
#                                             FUNCIONES
#---------------------------------------------------------------------------------------------------
# Crear el cluster
cl <- makeCluster(NUM_CORES)
# Exportar las funciones y librerías necesarias al cluster
clusterEvalQ(cl, {
# library(parallel)
library(readxl)
library(dplyr)
})
# Función para procesar cada archivo Excel
procesar_excel <- function(ruta_archivo) {
hojas <- excel_sheets(ruta_archivo)
datos <- lapply(hojas[5:6], function(hoja) read_excel(ruta_archivo, sheet = hoja))
bind_rows(datos)  # Combinar datos de todas las hojas
}
# Función para procesar cada mes
procesar_mes <- function(ruta_mes) {
archivos <- list.files(ruta_mes, pattern = "\\.xls$", full.names = TRUE)
datos_mes <- parLapply(cl, archivos, procesar_excel)
bind_rows(datos_mes)
}
# Exportar las funciones necesarias al clúster
clusterExport(cl, c("procesar_excel", "procesar_mes","cl"))
# Directorio con carpetas de meses
directorio_principal <- file.path(getwd(),"/02_Database_Reporte_Estadistico/")
meses <- list.dirs(directorio_principal, recursive = FALSE)
# Ejecutar en paralelo para cada mes
datos_final <- parLapply(cl, meses, procesar_mes)
TF <- bind_rows(datos_final)
# library(tidyr)
# library(plotly)
# library(plyr)
library(parallel)
# Ejecutar en paralelo para cada mes
datos_final <- parLapply(cl, meses, procesar_mes)
remove(list = ls())
# Cargar los paquetes necesarios
library(parallel)
library(readxl)
library(dplyr)
# Definir el número de núcleos a utilizar
NUM_CORES <- detectCores() - 1
# Crear el clúster
cl <- makeCluster(NUM_CORES)
# Cargar los paquetes necesarios en cada nodo del clúster
clusterEvalQ(cl, {
library(readxl)
library(dplyr)
})
# Definir la función para procesar cada archivo Excel
procesar_excel <- function(ruta_archivo) {
hojas <- excel_sheets(ruta_archivo)
datos <- lapply(hojas[5:6], function(hoja) read_excel(ruta_archivo, sheet = hoja))
bind_rows(datos)  # Combinar datos de todas las hojas
}
# Definir la función para procesar cada mes
procesar_mes <- function(ruta_mes) {
archivos <- list.files(ruta_mes, pattern = "\\.xls$", full.names = TRUE)
datos_mes <- parLapply(cl, archivos, procesar_excel)
bind_rows(datos_mes)
}
# Exportar las funciones y el objeto 'cl' necesarios al clúster
clusterExport(cl, c("procesar_excel", "procesar_mes", "cl"))
# Definir el directorio principal con las carpetas de los meses
directorio_principal <- file.path(getwd(), "02_Database_Reporte_Estadistico")
meses <- list.dirs(directorio_principal, recursive = FALSE)
# Ejecutar en paralelo el procesamiento para cada mes
datos_final <- parLapply(cl, meses, procesar_mes)
TF <- bind_rows(datos_final)
# Cerrar el clúster
stopCluster(cl)
remove(list = ls())
# Cargar los paquetes necesarios en la sesión principal
library(parallel)
library(readxl)
library(dplyr)
# Definir el número de núcleos a utilizar
NUM_CORES <- detectCores() - 1
# Crear el clúster
cl <- makeCluster(NUM_CORES)
# Cargar los paquetes necesarios en cada nodo del clúster
clusterEvalQ(cl, {
library(readxl)
library(dplyr)
})
# Definir la función para procesar cada archivo Excel
procesar_excel <- function(ruta_archivo) {
hojas <- excel_sheets(ruta_archivo)
datos <- lapply(hojas[5:6], function(hoja) read_excel(ruta_archivo, sheet = hoja))
bind_rows(datos)  # Combinar datos de todas las hojas
}
# Definir la función para procesar cada mes
procesar_mes <- function(ruta_mes) {
archivos <- list.files(ruta_mes, pattern = "\\.xls$", full.names = TRUE)
datos_mes <- lapply(archivos, procesar_excel)
bind_rows(datos_mes)
}
# Exportar las funciones necesarias al clúster
clusterExport(cl, c("procesar_excel", "procesar_mes"))
# Definir el directorio principal con las carpetas de los meses
directorio_principal <- file.path(getwd(), "02_Database_Reporte_Estadistico")
meses <- list.dirs(directorio_principal, recursive = FALSE)
# Ejecutar en paralelo el procesamiento para cada mes
datos_final <- parLapply(cl, meses, procesar_mes)
DIR_ED <- paste0(getwd(),"/01_Estructura_Datos_Extraccion/")
DIR_RE <- paste0(getwd(),"/02_Database_Reporte_Estadistico/")
HOJAS_ED <-c("Ingresos","Trámite")
library(readxl)
library(dplyr)
#---------------------------------------------------------------------------------------------------
# SE CARGAN LIBRERIAS
#---------------------------------------------------------------------------------------------------
library(openxlsx)
DIR_ED <- file.path(getwd(),"/01_Estructura_Datos_Extraccion/")
RUTA_ED <- file.path(getwd(),"/01_Estructura_Datos_Extraccion/")
RUTA_ED
RUTA_ED <- file.path(getwd(),"01_Estructura_Datos_Extraccion/")
RUTA_ED
data_ingresos <- openxlsx::read.xlsx(RUTA_ED,sheet = HOJAS_ED[1],colNames = FALSE)
data_ingresos <- openxlsx::read.xlsx(paste0(RUTA_ED,NOMBRE_ED,".xlsx"),
sheet = HOJAS_ED[1],
colNames = FALSE)
NOMBRE_ED <- "04_Estructura_Datos_Justicia_Agraria_CNIJF2025_VF(20feb2025)_Extraccion_Variables"
HOJAS_ED <-c("Ingresos","Trámite")
data_ingresos <- openxlsx::read.xlsx(paste0(RUTA_ED,NOMBRE_ED,".xlsx"),
sheet = HOJAS_ED[1],
colNames = FALSE)
paste0(RUTA_ED,NOMBRE_ED,".xlsx")
RUTA_ED
RUTA_ED <- file.path(getwd(),"01_Estructura_Datos_Extraccion")
RUTA_ED
file.path(RUTA_ED,NOMBRE_ED,".xlsx")
NOMBRE_ED <- "04_Estructura_Datos_Justicia_Agraria_CNIJF2025_VF(20feb2025)_Extraccion_Variables.xlsx"
HOJAS_ED <-c("Ingresos","Trámite")
data_ingresos <- openxlsx::read.xlsx(file.path(RUTA_ED,NOMBRE_ED),
sheet = HOJAS_ED[1],
colNames = FALSE)
View(data_ingresos)
data_ingresos <- openxlsx::read.xlsx(file.path(RUTA_ED,NOMBRE_ED),
sheet = HOJAS_ED[1],
colNames = FALSE)
View(data_ingresos)
data_ingresos <- openxlsx::read.xlsx(file.path(RUTA_ED,NOMBRE_ED),
sheet = HOJAS_ED[1],
colNames = FALSE)
library(stringr)
coor_var <- data_ingresos %>%
mutate(
Hoja = str_extract(X6, "HOJA\\s\\d+"),
Columna = str_extract(X6, "COLUMNA\\s[A-Z]"),
Fila = str_extract(X6, "FILA\\s\\d+")
) %>%
select(Hoja, Columna, Fila) %>%
filter(!is.na(Hoja) | !is.na(Columna) | !is.na(Fila)) # Filtrar solo filas con valores
View(coor_var)
library(tidyr)
data_hoja_ed <- openxlsx::read.xlsx(file.path(RUTA_ED,NOMBRE_ED),
sheet = HOJAS_ED[1],
colNames = FALSE)
data_hoja_ed
View(data_hoja_ed)
j <- 6
j <- 6
columna <- 6
coor_var <- data_hoja_ed %>%
mutate(
Hoja = str_extract(columna, "HOJA\\s\\d+"),
Columna = str_extract(columna, "COLUMNA\\s[A-Z]"),
Fila = str_extract(columna, "FILA\\s\\d+")
)
data_hoja_ed %>%
mutate(
Hoja = str_extract(columna, "HOJA\\s\\d+"),
Columna = str_extract(columna, "COLUMNA\\s[A-Z]"),
Fila = str_extract(columna, "FILA\\s\\d+")
)
View(coor_var)
data_hoja_ed[,j]
data_hoja_ed[6:8,j]
View(data_hoja_ed)
data_hoja_ed <- openxlsx::read.xlsx(file.path(RUTA_ED,NOMBRE_ED),
sheet = HOJAS_ED[1],
colNames = FALSE,skipEmptyRows = FALSE)
View(data_hoja_ed)
data_hoja_ed <- openxlsx::read.xlsx(file.path(RUTA_ED,NOMBRE_ED),
sheet = HOJAS_ED[1],
colNames = FALSE,
skipEmptyRows = FALSE,
skipEmptyCols = FALSE)
View(data_hoja_ed)
string = data_hoja_ed[6:8,j]
data_hoja_ed[6:8,j]
str_detect(string = data_hoja_ed[6:8,j],pattern = "HOJA")
str_detect(string = data_hoja_ed[6,j],pattern = "HOJA")
booleano <- str_detect(string = data_hoja_ed[6,j],pattern = "HOJA")
booleano
data_hoja_ed[6:8,j]
cadena <- data_hoja_ed[6:8,j]
# Extraer el número de Hoja
hoja <- as.numeric(str_extract(cadena, "(?<=Hoja\\s)\\d+"))
hoja
cadena
# Extraer el número de Hoja
hoja <- as.numeric(str_extract(cadena, "(?<=HOJA\\s)\\d+"))
hoja
# Extraer la letra de la columna y convertirla a número de Excel
columna_letra <- str_extract(cadena, "(?<=columna\\s)[A-Z]")
columna_letra
# Extraer la letra de la columna y convertirla a número de Excel
columna_letra <- str_extract(cadena, "(?<=COLUMNA\\s)[A-Z]")
columna_letra
columna_numero <- match(columna_letra, LETTERS)
columna_numero
# Extraer el número de la fila
fila <- as.numeric(str_extract(cadena, "(?<=FILA\\s)\\d+"))
fila
# Mostrar resultados
resultado <- tibble(Hoja = hoja, Columna = columna_numero, Fila = fila)
resultado
print(resultado)
